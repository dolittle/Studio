/* tslint:disable */
/* eslint-disable */
/**
 * Dolittle.Bridge.M3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProgramDetails,
  ProgramHeader,
} from '../models';
import {
    ProgramDetailsFromJSON,
    ProgramDetailsToJSON,
    ProgramHeaderFromJSON,
    ProgramHeaderToJSON,
} from '../models';

export interface MetadataEnvironmentsEnvironmentProgramsGetRequest {
    environment: string;
    tenantID?: string;
}

export interface MetadataEnvironmentsEnvironmentProgramsProgramGetRequest {
    environment: string;
    program: string;
    tenantID?: string;
}

/**
 * 
 */
export class ProgramMetadataApi extends runtime.BaseAPI {

    /**
     */
    async metadataEnvironmentsEnvironmentProgramsGetRaw(requestParameters: MetadataEnvironmentsEnvironmentProgramsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProgramHeader>>> {
        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling metadataEnvironmentsEnvironmentProgramsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.tenantID !== undefined && requestParameters.tenantID !== null) {
            headerParameters['Tenant-ID'] = String(requestParameters.tenantID);
        }

        const response = await this.request({
            path: `/metadata/environments/{environment}/programs`.replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProgramHeaderFromJSON));
    }

    /**
     */
    async metadataEnvironmentsEnvironmentProgramsGet(requestParameters: MetadataEnvironmentsEnvironmentProgramsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProgramHeader>> {
        const response = await this.metadataEnvironmentsEnvironmentProgramsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async metadataEnvironmentsEnvironmentProgramsProgramGetRaw(requestParameters: MetadataEnvironmentsEnvironmentProgramsProgramGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProgramDetails>>> {
        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling metadataEnvironmentsEnvironmentProgramsProgramGet.');
        }

        if (requestParameters.program === null || requestParameters.program === undefined) {
            throw new runtime.RequiredError('program','Required parameter requestParameters.program was null or undefined when calling metadataEnvironmentsEnvironmentProgramsProgramGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.tenantID !== undefined && requestParameters.tenantID !== null) {
            headerParameters['Tenant-ID'] = String(requestParameters.tenantID);
        }

        const response = await this.request({
            path: `/metadata/environments/{environment}/programs/{program}`.replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"program"}}`, encodeURIComponent(String(requestParameters.program))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProgramDetailsFromJSON));
    }

    /**
     */
    async metadataEnvironmentsEnvironmentProgramsProgramGet(requestParameters: MetadataEnvironmentsEnvironmentProgramsProgramGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProgramDetails>> {
        const response = await this.metadataEnvironmentsEnvironmentProgramsProgramGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
