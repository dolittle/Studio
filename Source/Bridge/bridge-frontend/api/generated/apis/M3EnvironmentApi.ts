/* tslint:disable */
/* eslint-disable */
/**
 * Dolittle.Bridge.M3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEnvironmentRequest,
  IonConfigRequest,
  MetadataPublisherConfigRequest,
} from '../models';
import {
    CreateEnvironmentRequestFromJSON,
    CreateEnvironmentRequestToJSON,
    IonConfigRequestFromJSON,
    IonConfigRequestToJSON,
    MetadataPublisherConfigRequestFromJSON,
    MetadataPublisherConfigRequestToJSON,
} from '../models';

export interface M3environmentCreatePostRequest {
    tenantID?: string;
    createEnvironmentRequest?: CreateEnvironmentRequest;
}

export interface M3environmentM3EnvironmentConfigureIonPostRequest {
    m3Environment: string;
    tenantID?: string;
    ionConfigRequest?: IonConfigRequest;
}

export interface M3environmentM3EnvironmentConfigureMdpPostRequest {
    m3Environment: string;
    tenantID?: string;
    metadataPublisherConfigRequest?: MetadataPublisherConfigRequest;
}

/**
 * 
 */
export class M3EnvironmentApi extends runtime.BaseAPI {

    /**
     */
    async m3environmentCreatePostRaw(requestParameters: M3environmentCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.tenantID !== undefined && requestParameters.tenantID !== null) {
            headerParameters['Tenant-ID'] = String(requestParameters.tenantID);
        }

        const response = await this.request({
            path: `/m3environment/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEnvironmentRequestToJSON(requestParameters.createEnvironmentRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async m3environmentCreatePost(requestParameters: M3environmentCreatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.m3environmentCreatePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async m3environmentM3EnvironmentConfigureIonPostRaw(requestParameters: M3environmentM3EnvironmentConfigureIonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.m3Environment === null || requestParameters.m3Environment === undefined) {
            throw new runtime.RequiredError('m3Environment','Required parameter requestParameters.m3Environment was null or undefined when calling m3environmentM3EnvironmentConfigureIonPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.tenantID !== undefined && requestParameters.tenantID !== null) {
            headerParameters['Tenant-ID'] = String(requestParameters.tenantID);
        }

        const response = await this.request({
            path: `/m3environment/{m3Environment}/configure-ion`.replace(`{${"m3Environment"}}`, encodeURIComponent(String(requestParameters.m3Environment))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IonConfigRequestToJSON(requestParameters.ionConfigRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async m3environmentM3EnvironmentConfigureIonPost(requestParameters: M3environmentM3EnvironmentConfigureIonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.m3environmentM3EnvironmentConfigureIonPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async m3environmentM3EnvironmentConfigureMdpPostRaw(requestParameters: M3environmentM3EnvironmentConfigureMdpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.m3Environment === null || requestParameters.m3Environment === undefined) {
            throw new runtime.RequiredError('m3Environment','Required parameter requestParameters.m3Environment was null or undefined when calling m3environmentM3EnvironmentConfigureMdpPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.tenantID !== undefined && requestParameters.tenantID !== null) {
            headerParameters['Tenant-ID'] = String(requestParameters.tenantID);
        }

        const response = await this.request({
            path: `/m3environment/{m3Environment}/configure-mdp`.replace(`{${"m3Environment"}}`, encodeURIComponent(String(requestParameters.m3Environment))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetadataPublisherConfigRequestToJSON(requestParameters.metadataPublisherConfigRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async m3environmentM3EnvironmentConfigureMdpPost(requestParameters: M3environmentM3EnvironmentConfigureMdpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.m3environmentM3EnvironmentConfigureMdpPostRaw(requestParameters, initOverrides);
    }

}
