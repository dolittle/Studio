/* tslint:disable */
/* eslint-disable */
/**
 * Aigonix.Bridge.M3
 * Bridge API - made for Aigonix Studio
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConnectionPrograms,
  ProblemDetails,
  ProgramDetails,
  ProgramMetadataHeader,
  ProgramTransaction,
} from '../models/index';
import {
    ConnectionProgramsFromJSON,
    ConnectionProgramsToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ProgramDetailsFromJSON,
    ProgramDetailsToJSON,
    ProgramMetadataHeaderFromJSON,
    ProgramMetadataHeaderToJSON,
    ProgramTransactionFromJSON,
    ProgramTransactionToJSON,
} from '../models/index';

export interface ConnectionsIdMetadataProgramsGetRequest {
    id: string;
}

export interface ConnectionsIdMetadataProgramsProgramProgramGetRequest {
    id: string;
    program: string;
}

export interface ConnectionsIdMetadataProgramsProgramProgramTransactionsTransactionGetRequest {
    id: string;
    program: string;
    transaction: string;
}

export interface ConnectionsIdMetadataProgramsSearchGetRequest {
    id: string;
    query?: string;
}

/**
 * 
 */
export class ProgramMetadataApi extends runtime.BaseAPI {

    /**
     */
    async connectionsIdMetadataProgramsGetRaw(requestParameters: ConnectionsIdMetadataProgramsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProgramMetadataHeader>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMetadataProgramsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/connections/{id}/metadata/programs`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProgramMetadataHeaderFromJSON));
    }

    /**
     */
    async connectionsIdMetadataProgramsGet(requestParameters: ConnectionsIdMetadataProgramsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProgramMetadataHeader>> {
        const response = await this.connectionsIdMetadataProgramsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async connectionsIdMetadataProgramsProgramProgramGetRaw(requestParameters: ConnectionsIdMetadataProgramsProgramProgramGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProgramDetails>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMetadataProgramsProgramProgramGet.');
        }

        if (requestParameters.program === null || requestParameters.program === undefined) {
            throw new runtime.RequiredError('program','Required parameter requestParameters.program was null or undefined when calling connectionsIdMetadataProgramsProgramProgramGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/connections/{id}/metadata/programs/program/{program}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"program"}}`, encodeURIComponent(String(requestParameters.program))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProgramDetailsFromJSON(jsonValue));
    }

    /**
     */
    async connectionsIdMetadataProgramsProgramProgramGet(requestParameters: ConnectionsIdMetadataProgramsProgramProgramGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProgramDetails> {
        const response = await this.connectionsIdMetadataProgramsProgramProgramGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async connectionsIdMetadataProgramsProgramProgramTransactionsTransactionGetRaw(requestParameters: ConnectionsIdMetadataProgramsProgramProgramTransactionsTransactionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProgramTransaction>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMetadataProgramsProgramProgramTransactionsTransactionGet.');
        }

        if (requestParameters.program === null || requestParameters.program === undefined) {
            throw new runtime.RequiredError('program','Required parameter requestParameters.program was null or undefined when calling connectionsIdMetadataProgramsProgramProgramTransactionsTransactionGet.');
        }

        if (requestParameters.transaction === null || requestParameters.transaction === undefined) {
            throw new runtime.RequiredError('transaction','Required parameter requestParameters.transaction was null or undefined when calling connectionsIdMetadataProgramsProgramProgramTransactionsTransactionGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/connections/{id}/metadata/programs/program/{program}/transactions/{transaction}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"program"}}`, encodeURIComponent(String(requestParameters.program))).replace(`{${"transaction"}}`, encodeURIComponent(String(requestParameters.transaction))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProgramTransactionFromJSON(jsonValue));
    }

    /**
     */
    async connectionsIdMetadataProgramsProgramProgramTransactionsTransactionGet(requestParameters: ConnectionsIdMetadataProgramsProgramProgramTransactionsTransactionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProgramTransaction> {
        const response = await this.connectionsIdMetadataProgramsProgramProgramTransactionsTransactionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async connectionsIdMetadataProgramsSearchGetRaw(requestParameters: ConnectionsIdMetadataProgramsSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectionPrograms>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMetadataProgramsSearchGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/connections/{id}/metadata/programs/search`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionProgramsFromJSON(jsonValue));
    }

    /**
     */
    async connectionsIdMetadataProgramsSearchGet(requestParameters: ConnectionsIdMetadataProgramsSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectionPrograms> {
        const response = await this.connectionsIdMetadataProgramsSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
