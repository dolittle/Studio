/* tslint:disable */
/* eslint-disable */
/**
 * Dolittle.Bridge.M3
 * Bridge API - made for Dolittle Studio
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Contact: dolittle@dolittle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MappingReference,
  MessageMappingModelIEnumerableResult,
  MessageMappingModelResult,
  NoSuchReadModelResult,
  ProblemDetails,
  SetMessageMappingRequestArguments,
} from '../models';
import {
    MappingReferenceFromJSON,
    MappingReferenceToJSON,
    MessageMappingModelIEnumerableResultFromJSON,
    MessageMappingModelIEnumerableResultToJSON,
    MessageMappingModelResultFromJSON,
    MessageMappingModelResultToJSON,
    NoSuchReadModelResultFromJSON,
    NoSuchReadModelResultToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SetMessageMappingRequestArgumentsFromJSON,
    SetMessageMappingRequestArgumentsToJSON,
} from '../models';

export interface ConnectionsIdMessageMappingsDeployPostRequest {
    id: string;
    mappingReference: Array<MappingReference>;
}

export interface ConnectionsIdMessageMappingsGetRequest {
    id: string;
    startIndex?: number;
    pageSize?: number;
}

export interface ConnectionsIdMessageMappingsTablesTableMessagesMessageDeleteRequest {
    id: string;
    table: string;
    message: string;
}

export interface ConnectionsIdMessageMappingsTablesTableMessagesMessageDeleteMultiplePostRequest {
    id: string;
    table: string;
    message: string;
    mappingReference: Array<MappingReference>;
}

export interface ConnectionsIdMessageMappingsTablesTableMessagesMessageDeployPostRequest {
    id: string;
    table: string;
    message: string;
}

export interface ConnectionsIdMessageMappingsTablesTableMessagesMessageGetRequest {
    id: string;
    table: string;
    message: string;
}

export interface ConnectionsIdMessageMappingsTablesTableMessagesMessagePostRequest {
    id: string;
    table: string;
    message: string;
    setMessageMappingRequestArguments?: SetMessageMappingRequestArguments;
}

/**
 * 
 */
export class MessageMappingApi extends runtime.BaseAPI {

    /**
     * Deploy multiple mappings. Each of the mappings must exist. If any of the  deployments fail a 400 is returned with the list of failures. If all  succeed a 200 is returned with the list of successes.
     */
    async connectionsIdMessageMappingsDeployPostRaw(requestParameters: ConnectionsIdMessageMappingsDeployPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMessageMappingsDeployPost.');
        }

        if (requestParameters.mappingReference === null || requestParameters.mappingReference === undefined) {
            throw new runtime.RequiredError('mappingReference','Required parameter requestParameters.mappingReference was null or undefined when calling connectionsIdMessageMappingsDeployPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/message-mappings/deploy`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.mappingReference.map(MappingReferenceToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deploy multiple mappings. Each of the mappings must exist. If any of the  deployments fail a 400 is returned with the list of failures. If all  succeed a 200 is returned with the list of successes.
     */
    async connectionsIdMessageMappingsDeployPost(requestParameters: ConnectionsIdMessageMappingsDeployPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.connectionsIdMessageMappingsDeployPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all message mappings of table to message(s) for a connection
     */
    async connectionsIdMessageMappingsGetRaw(requestParameters: ConnectionsIdMessageMappingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageMappingModelIEnumerableResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMessageMappingsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/message-mappings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageMappingModelIEnumerableResultFromJSON(jsonValue));
    }

    /**
     * Get all message mappings of table to message(s) for a connection
     */
    async connectionsIdMessageMappingsGet(requestParameters: ConnectionsIdMessageMappingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageMappingModelIEnumerableResult> {
        const response = await this.connectionsIdMessageMappingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE the mapping of a table to a message.
     */
    async connectionsIdMessageMappingsTablesTableMessagesMessageDeleteRaw(requestParameters: ConnectionsIdMessageMappingsTablesTableMessagesMessageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageDelete.');
        }

        if (requestParameters.table === null || requestParameters.table === undefined) {
            throw new runtime.RequiredError('table','Required parameter requestParameters.table was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageDelete.');
        }

        if (requestParameters.message === null || requestParameters.message === undefined) {
            throw new runtime.RequiredError('message','Required parameter requestParameters.message was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/message-mappings/tables/{table}/messages/{message}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"table"}}`, encodeURIComponent(String(requestParameters.table))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * DELETE the mapping of a table to a message.
     */
    async connectionsIdMessageMappingsTablesTableMessagesMessageDelete(requestParameters: ConnectionsIdMessageMappingsTablesTableMessagesMessageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.connectionsIdMessageMappingsTablesTableMessagesMessageDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete multiple message mappings. Each of the mappings must exist.  If any of the deletions fail a 400 is returned with the list of failures.  If all succeed a 200 is returned with the list of successes.
     */
    async connectionsIdMessageMappingsTablesTableMessagesMessageDeleteMultiplePostRaw(requestParameters: ConnectionsIdMessageMappingsTablesTableMessagesMessageDeleteMultiplePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageDeleteMultiplePost.');
        }

        if (requestParameters.table === null || requestParameters.table === undefined) {
            throw new runtime.RequiredError('table','Required parameter requestParameters.table was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageDeleteMultiplePost.');
        }

        if (requestParameters.message === null || requestParameters.message === undefined) {
            throw new runtime.RequiredError('message','Required parameter requestParameters.message was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageDeleteMultiplePost.');
        }

        if (requestParameters.mappingReference === null || requestParameters.mappingReference === undefined) {
            throw new runtime.RequiredError('mappingReference','Required parameter requestParameters.mappingReference was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageDeleteMultiplePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/message-mappings/tables/{table}/messages/{message}/delete-multiple`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"table"}}`, encodeURIComponent(String(requestParameters.table))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.mappingReference.map(MappingReferenceToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete multiple message mappings. Each of the mappings must exist.  If any of the deletions fail a 400 is returned with the list of failures.  If all succeed a 200 is returned with the list of successes.
     */
    async connectionsIdMessageMappingsTablesTableMessagesMessageDeleteMultiplePost(requestParameters: ConnectionsIdMessageMappingsTablesTableMessagesMessageDeleteMultiplePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.connectionsIdMessageMappingsTablesTableMessagesMessageDeleteMultiplePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deploy a mapping of a table to a message.
     */
    async connectionsIdMessageMappingsTablesTableMessagesMessageDeployPostRaw(requestParameters: ConnectionsIdMessageMappingsTablesTableMessagesMessageDeployPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageDeployPost.');
        }

        if (requestParameters.table === null || requestParameters.table === undefined) {
            throw new runtime.RequiredError('table','Required parameter requestParameters.table was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageDeployPost.');
        }

        if (requestParameters.message === null || requestParameters.message === undefined) {
            throw new runtime.RequiredError('message','Required parameter requestParameters.message was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageDeployPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/message-mappings/tables/{table}/messages/{message}/deploy`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"table"}}`, encodeURIComponent(String(requestParameters.table))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deploy a mapping of a table to a message.
     */
    async connectionsIdMessageMappingsTablesTableMessagesMessageDeployPost(requestParameters: ConnectionsIdMessageMappingsTablesTableMessagesMessageDeployPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.connectionsIdMessageMappingsTablesTableMessagesMessageDeployPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get a message mapping of table to a named message for a connection
     */
    async connectionsIdMessageMappingsTablesTableMessagesMessageGetRaw(requestParameters: ConnectionsIdMessageMappingsTablesTableMessagesMessageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageMappingModelResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageGet.');
        }

        if (requestParameters.table === null || requestParameters.table === undefined) {
            throw new runtime.RequiredError('table','Required parameter requestParameters.table was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageGet.');
        }

        if (requestParameters.message === null || requestParameters.message === undefined) {
            throw new runtime.RequiredError('message','Required parameter requestParameters.message was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessageGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/message-mappings/tables/{table}/messages/{message}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"table"}}`, encodeURIComponent(String(requestParameters.table))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageMappingModelResultFromJSON(jsonValue));
    }

    /**
     * Get a message mapping of table to a named message for a connection
     */
    async connectionsIdMessageMappingsTablesTableMessagesMessageGet(requestParameters: ConnectionsIdMessageMappingsTablesTableMessagesMessageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageMappingModelResult> {
        const response = await this.connectionsIdMessageMappingsTablesTableMessagesMessageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the mapping of a table to a message to the mapping described  in the body of the request.
     */
    async connectionsIdMessageMappingsTablesTableMessagesMessagePostRaw(requestParameters: ConnectionsIdMessageMappingsTablesTableMessagesMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessagePost.');
        }

        if (requestParameters.table === null || requestParameters.table === undefined) {
            throw new runtime.RequiredError('table','Required parameter requestParameters.table was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessagePost.');
        }

        if (requestParameters.message === null || requestParameters.message === undefined) {
            throw new runtime.RequiredError('message','Required parameter requestParameters.message was null or undefined when calling connectionsIdMessageMappingsTablesTableMessagesMessagePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/message-mappings/tables/{table}/messages/{message}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"table"}}`, encodeURIComponent(String(requestParameters.table))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetMessageMappingRequestArgumentsToJSON(requestParameters.setMessageMappingRequestArguments),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the mapping of a table to a message to the mapping described  in the body of the request.
     */
    async connectionsIdMessageMappingsTablesTableMessagesMessagePost(requestParameters: ConnectionsIdMessageMappingsTablesTableMessagesMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.connectionsIdMessageMappingsTablesTableMessagesMessagePostRaw(requestParameters, initOverrides);
    }

}
