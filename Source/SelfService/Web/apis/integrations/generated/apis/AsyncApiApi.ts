/* tslint:disable */
/* eslint-disable */
/**
 * Dolittle.Bridge.M3
 * Bridge API - made for Dolittle Studio
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Contact: dolittle@dolittle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface ConnectionsIdAsyncapiSpecJsonGetRequest {
    id: string;
}

export interface ConnectionsIdAsyncapiSpecYamlGetRequest {
    id: string;
}

/**
 * 
 */
export class AsyncApiApi extends runtime.BaseAPI {

    /**
     * Get the AsyncAPI specification for a given connection as json
     */
    async connectionsIdAsyncapiSpecJsonGetRaw(requestParameters: ConnectionsIdAsyncapiSpecJsonGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdAsyncapiSpecJsonGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/asyncapi/spec.json`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the AsyncAPI specification for a given connection as json
     */
    async connectionsIdAsyncapiSpecJsonGet(requestParameters: ConnectionsIdAsyncapiSpecJsonGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.connectionsIdAsyncapiSpecJsonGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get the AsyncAPI specification for a given connection as yaml
     */
    async connectionsIdAsyncapiSpecYamlGetRaw(requestParameters: ConnectionsIdAsyncapiSpecYamlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdAsyncapiSpecYamlGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/asyncapi/spec.yaml`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the AsyncAPI specification for a given connection as yaml
     */
    async connectionsIdAsyncapiSpecYamlGet(requestParameters: ConnectionsIdAsyncapiSpecYamlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.connectionsIdAsyncapiSpecYamlGetRaw(requestParameters, initOverrides);
    }

}
