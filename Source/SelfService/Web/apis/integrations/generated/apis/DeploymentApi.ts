/* tslint:disable */
/* eslint-disable */
/**
 * Dolittle.Bridge.M3
 * Bridge API - made for Dolittle Studio
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Contact: dolittle@dolittle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConnectionModelResult,
} from '../models/index';
import {
    ConnectionModelResultFromJSON,
    ConnectionModelResultToJSON,
} from '../models/index';

export interface ConnectionsIdDeployCloudPostRequest {
    id: string;
}

export interface ConnectionsIdDeployOnPremisesPostRequest {
    id: string;
}

export interface ConnectionsIdDeploySimulateAlivePutRequest {
    id: string;
}

/**
 * 
 */
export class DeploymentApi extends runtime.BaseAPI {

    /**
     * POST to this resource to deploy to the cloud
     */
    async connectionsIdDeployCloudPostRaw(requestParameters: ConnectionsIdDeployCloudPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectionModelResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdDeployCloudPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/deploy/cloud`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionModelResultFromJSON(jsonValue));
    }

    /**
     * POST to this resource to deploy to the cloud
     */
    async connectionsIdDeployCloudPost(requestParameters: ConnectionsIdDeployCloudPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectionModelResult> {
        const response = await this.connectionsIdDeployCloudPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST to this resource to register deployment on premises. This is NOT  the url to download the connector-bundle.
     */
    async connectionsIdDeployOnPremisesPostRaw(requestParameters: ConnectionsIdDeployOnPremisesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectionModelResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdDeployOnPremisesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/deploy/on-premises`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionModelResultFromJSON(jsonValue));
    }

    /**
     * POST to this resource to register deployment on premises. This is NOT  the url to download the connector-bundle.
     */
    async connectionsIdDeployOnPremisesPost(requestParameters: ConnectionsIdDeployOnPremisesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectionModelResult> {
        const response = await this.connectionsIdDeployOnPremisesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT to this resource to deploy to the cloud - this is for simulation purposes
     */
    async connectionsIdDeploySimulateAlivePutRaw(requestParameters: ConnectionsIdDeploySimulateAlivePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectionModelResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdDeploySimulateAlivePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/deploy/simulate/alive`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionModelResultFromJSON(jsonValue));
    }

    /**
     * PUT to this resource to deploy to the cloud - this is for simulation purposes
     */
    async connectionsIdDeploySimulateAlivePut(requestParameters: ConnectionsIdDeploySimulateAlivePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectionModelResult> {
        const response = await this.connectionsIdDeploySimulateAlivePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
