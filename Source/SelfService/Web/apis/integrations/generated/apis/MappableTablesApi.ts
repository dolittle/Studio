/* tslint:disable */
/* eslint-disable */
/**
 * Dolittle.Bridge.M3
 * Bridge API - made for Dolittle Studio
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Contact: dolittle@dolittle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MappableTableResult,
  ProblemDetails,
  TableListingEntryIEnumerableResult,
} from '../models';
import {
    MappableTableResultFromJSON,
    MappableTableResultToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TableListingEntryIEnumerableResultFromJSON,
    TableListingEntryIEnumerableResultToJSON,
} from '../models';

export interface ConnectionsIdMessageMappingsTablesGetRequest {
    id: string;
    startIndex?: number;
    pageSize?: number;
}

export interface ConnectionsIdMessageMappingsTablesSearchGetRequest {
    id: string;
    search?: string;
    startIndex?: number;
    pageSize?: number;
}

export interface ConnectionsIdMessageMappingsTablesTableGetRequest {
    id: string;
    table: string;
}

/**
 * 
 */
export class MappableTablesApi extends runtime.BaseAPI {

    /**
     */
    async connectionsIdMessageMappingsTablesGetRaw(requestParameters: ConnectionsIdMessageMappingsTablesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TableListingEntryIEnumerableResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMessageMappingsTablesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/message-mappings/tables`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TableListingEntryIEnumerableResultFromJSON(jsonValue));
    }

    /**
     */
    async connectionsIdMessageMappingsTablesGet(requestParameters: ConnectionsIdMessageMappingsTablesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TableListingEntryIEnumerableResult> {
        const response = await this.connectionsIdMessageMappingsTablesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async connectionsIdMessageMappingsTablesSearchGetRaw(requestParameters: ConnectionsIdMessageMappingsTablesSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TableListingEntryIEnumerableResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMessageMappingsTablesSearchGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/message-mappings/tables/search`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TableListingEntryIEnumerableResultFromJSON(jsonValue));
    }

    /**
     */
    async connectionsIdMessageMappingsTablesSearchGet(requestParameters: ConnectionsIdMessageMappingsTablesSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TableListingEntryIEnumerableResult> {
        const response = await this.connectionsIdMessageMappingsTablesSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async connectionsIdMessageMappingsTablesTableGetRaw(requestParameters: ConnectionsIdMessageMappingsTablesTableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MappableTableResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling connectionsIdMessageMappingsTablesTableGet.');
        }

        if (requestParameters.table === null || requestParameters.table === undefined) {
            throw new runtime.RequiredError('table','Required parameter requestParameters.table was null or undefined when calling connectionsIdMessageMappingsTablesTableGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Organization-Id"] = this.configuration.apiKey("X-Organization-Id"); // X-Organization-Id authentication
        }

        const response = await this.request({
            path: `/connections/{id}/message-mappings/tables/{table}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"table"}}`, encodeURIComponent(String(requestParameters.table))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MappableTableResultFromJSON(jsonValue));
    }

    /**
     */
    async connectionsIdMessageMappingsTablesTableGet(requestParameters: ConnectionsIdMessageMappingsTablesTableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MappableTableResult> {
        const response = await this.connectionsIdMessageMappingsTablesTableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
