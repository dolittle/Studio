/* tslint:disable */
/* eslint-disable */
/**
 * Aigonix.Bridge.M3
 * Bridge API - made for Aigonix Studio
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApiParameter } from './ApiParameter';
import {
    ApiParameterFromJSON,
    ApiParameterFromJSONTyped,
    ApiParameterToJSON,
} from './ApiParameter';
import type { ParameterMode } from './ParameterMode';
import {
    ParameterModeFromJSON,
    ParameterModeFromJSONTyped,
    ParameterModeToJSON,
} from './ParameterMode';

/**
 * 
 * @export
 * @interface MappedParameter
 */
export interface MappedParameter {
    /**
     * 
     * @type {ApiParameter}
     * @memberof MappedParameter
     */
    parameter?: ApiParameter;
    /**
     * 
     * @type {string}
     * @memberof MappedParameter
     */
    mappedName?: string;
    /**
     * 
     * @type {string}
     * @memberof MappedParameter
     */
    mappedDescription?: string;
    /**
     * 
     * @type {ParameterMode}
     * @memberof MappedParameter
     */
    mode?: ParameterMode;
    /**
     * 
     * @type {string}
     * @memberof MappedParameter
     */
    defaultValue?: string | null;
}

/**
 * Check if a given object implements the MappedParameter interface.
 */
export function instanceOfMappedParameter(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MappedParameterFromJSON(json: any): MappedParameter {
    return MappedParameterFromJSONTyped(json, false);
}

export function MappedParameterFromJSONTyped(json: any, ignoreDiscriminator: boolean): MappedParameter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parameter': !exists(json, 'parameter') ? undefined : ApiParameterFromJSON(json['parameter']),
        'mappedName': !exists(json, 'mappedName') ? undefined : json['mappedName'],
        'mappedDescription': !exists(json, 'mappedDescription') ? undefined : json['mappedDescription'],
        'mode': !exists(json, 'mode') ? undefined : ParameterModeFromJSON(json['mode']),
        'defaultValue': !exists(json, 'defaultValue') ? undefined : json['defaultValue'],
    };
}

export function MappedParameterToJSON(value?: MappedParameter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parameter': ApiParameterToJSON(value.parameter),
        'mappedName': value.mappedName,
        'mappedDescription': value.mappedDescription,
        'mode': ParameterModeToJSON(value.mode),
        'defaultValue': value.defaultValue,
    };
}

