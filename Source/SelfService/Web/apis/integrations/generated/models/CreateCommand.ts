/* tslint:disable */
/* eslint-disable */
/**
 * Aigonix.Bridge.M3
 * Bridge API - made for Aigonix Studio
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateCommand
 */
export interface CreateCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateCommand
     */
    m3Program?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommand
     */
    m3Transaction?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommand
     */
    commandName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommand
     */
    commandDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommand
     */
    namespace?: string;
}

/**
 * Check if a given object implements the CreateCommand interface.
 */
export function instanceOfCreateCommand(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreateCommandFromJSON(json: any): CreateCommand {
    return CreateCommandFromJSONTyped(json, false);
}

export function CreateCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCommand {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'm3Program': !exists(json, 'm3Program') ? undefined : json['m3Program'],
        'm3Transaction': !exists(json, 'm3Transaction') ? undefined : json['m3Transaction'],
        'commandName': !exists(json, 'commandName') ? undefined : json['commandName'],
        'commandDescription': !exists(json, 'commandDescription') ? undefined : json['commandDescription'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
    };
}

export function CreateCommandToJSON(value?: CreateCommand | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'm3Program': value.m3Program,
        'm3Transaction': value.m3Transaction,
        'commandName': value.commandName,
        'commandDescription': value.commandDescription,
        'namespace': value.namespace,
    };
}

