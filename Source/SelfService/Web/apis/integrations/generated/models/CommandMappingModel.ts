/* tslint:disable */
/* eslint-disable */
/**
 * Aigonix.Bridge.M3
 * Bridge API - made for Aigonix Studio
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MappedParameter } from './MappedParameter';
import {
    MappedParameterFromJSON,
    MappedParameterFromJSONTyped,
    MappedParameterToJSON,
} from './MappedParameter';

/**
 * 
 * @export
 * @interface CommandMappingModel
 */
export interface CommandMappingModel {
    /**
     * The connection this command mapping belongs to
     * @type {string}
     * @memberof CommandMappingModel
     */
    connection: string;
    /**
     * The id of the command mapping within the context of the connection
     * @type {string}
     * @memberof CommandMappingModel
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof CommandMappingModel
     */
    createdAt: Date;
    /**
     * The name of the command-type this mapping describes
     * @type {string}
     * @memberof CommandMappingModel
     */
    name: string;
    /**
     * Optional description of the command mapping
     * @type {string}
     * @memberof CommandMappingModel
     */
    description?: string;
    /**
     * The namespace of the command mapping
     * @type {string}
     * @memberof CommandMappingModel
     */
    namespace?: string;
    /**
     * The M3 program that this command mapping is for
     * @type {string}
     * @memberof CommandMappingModel
     */
    m3Program?: string;
    /**
     * The M3 program transaction that this command mapping is for
     * @type {string}
     * @memberof CommandMappingModel
     */
    m3Transaction?: string;
    /**
     * The parameter mappings for the command
     * @type {Array<MappedParameter>}
     * @memberof CommandMappingModel
     */
    parameters: Array<MappedParameter>;
    /**
     * The last time (if any) the command mapping was deployed. May be null if
     * it has never been deployed
     * @type {Date}
     * @memberof CommandMappingModel
     */
    deployedAt?: Date | null;
    /**
     * The last deployed version, if any. May be null if it has never been
     * deployed
     * @type {number}
     * @memberof CommandMappingModel
     */
    deployedVersion?: number | null;
    /**
     * The last deployed version that has been confirmed by the remote service.
     * May be null if it has never been confirmed or if it has been deployed.
     * @type {number}
     * @memberof CommandMappingModel
     */
    confirmedDeployedVersion?: number | null;
}

/**
 * Check if a given object implements the CommandMappingModel interface.
 */
export function instanceOfCommandMappingModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "connection" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "parameters" in value;

    return isInstance;
}

export function CommandMappingModelFromJSON(json: any): CommandMappingModel {
    return CommandMappingModelFromJSONTyped(json, false);
}

export function CommandMappingModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommandMappingModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connection': json['connection'],
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'm3Program': !exists(json, 'm3Program') ? undefined : json['m3Program'],
        'm3Transaction': !exists(json, 'm3Transaction') ? undefined : json['m3Transaction'],
        'parameters': ((json['parameters'] as Array<any>).map(MappedParameterFromJSON)),
        'deployedAt': !exists(json, 'deployedAt') ? undefined : (json['deployedAt'] === null ? null : new Date(json['deployedAt'])),
        'deployedVersion': !exists(json, 'deployedVersion') ? undefined : json['deployedVersion'],
        'confirmedDeployedVersion': !exists(json, 'confirmedDeployedVersion') ? undefined : json['confirmedDeployedVersion'],
    };
}

export function CommandMappingModelToJSON(value?: CommandMappingModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'connection': value.connection,
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'name': value.name,
        'description': value.description,
        'namespace': value.namespace,
        'm3Program': value.m3Program,
        'm3Transaction': value.m3Transaction,
        'parameters': ((value.parameters as Array<any>).map(MappedParameterToJSON)),
        'deployedAt': value.deployedAt === undefined ? undefined : (value.deployedAt === null ? null : value.deployedAt.toISOString()),
        'deployedVersion': value.deployedVersion,
        'confirmedDeployedVersion': value.confirmedDeployedVersion,
    };
}

