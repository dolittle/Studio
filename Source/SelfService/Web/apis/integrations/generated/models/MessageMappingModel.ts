/* tslint:disable */
/* eslint-disable */
/**
 * Dolittle.Bridge.M3
 * Bridge API - made for Dolittle Studio
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Contact: dolittle@dolittle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConnectionId } from './ConnectionId';
import {
    ConnectionIdFromJSON,
    ConnectionIdFromJSONTyped,
    ConnectionIdToJSON,
} from './ConnectionId';
import type { MappableTable } from './MappableTable';
import {
    MappableTableFromJSON,
    MappableTableFromJSONTyped,
    MappableTableToJSON,
} from './MappableTable';
import type { MappedField } from './MappedField';
import {
    MappedFieldFromJSON,
    MappedFieldFromJSONTyped,
    MappedFieldToJSON,
} from './MappedField';
import type { ReadModelMetadata } from './ReadModelMetadata';
import {
    ReadModelMetadataFromJSON,
    ReadModelMetadataFromJSONTyped,
    ReadModelMetadataToJSON,
} from './ReadModelMetadata';

/**
 * 
 * @export
 * @interface MessageMappingModel
 */
export interface MessageMappingModel {
    /**
     * 
     * @type {string}
     * @memberof MessageMappingModel
     */
    id?: string | null;
    /**
     * 
     * @type {ReadModelMetadata}
     * @memberof MessageMappingModel
     */
    metadata?: ReadModelMetadata;
    /**
     * 
     * @type {string}
     * @memberof MessageMappingModel
     */
    name?: string | null;
    /**
     * 
     * @type {ConnectionId}
     * @memberof MessageMappingModel
     */
    connection?: ConnectionId;
    /**
     * 
     * @type {string}
     * @memberof MessageMappingModel
     */
    description?: string | null;
    /**
     * 
     * @type {MappableTable}
     * @memberof MessageMappingModel
     */
    fromTable?: MappableTable;
    /**
     * 
     * @type {Array<MappedField>}
     * @memberof MessageMappingModel
     */
    fieldMappings?: Array<MappedField> | null;
    /**
     * 
     * @type {Date}
     * @memberof MessageMappingModel
     */
    deployedAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof MessageMappingModel
     */
    deployedVersion?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MessageMappingModel
     */
    confirmedDeployedVersion?: number | null;
}

/**
 * Check if a given object implements the MessageMappingModel interface.
 */
export function instanceOfMessageMappingModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MessageMappingModelFromJSON(json: any): MessageMappingModel {
    return MessageMappingModelFromJSONTyped(json, false);
}

export function MessageMappingModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageMappingModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'metadata': !exists(json, 'metadata') ? undefined : ReadModelMetadataFromJSON(json['metadata']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'connection': !exists(json, 'connection') ? undefined : ConnectionIdFromJSON(json['connection']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'fromTable': !exists(json, 'fromTable') ? undefined : MappableTableFromJSON(json['fromTable']),
        'fieldMappings': !exists(json, 'fieldMappings') ? undefined : (json['fieldMappings'] === null ? null : (json['fieldMappings'] as Array<any>).map(MappedFieldFromJSON)),
        'deployedAt': !exists(json, 'deployedAt') ? undefined : (new Date(json['deployedAt'])),
        'deployedVersion': !exists(json, 'deployedVersion') ? undefined : json['deployedVersion'],
        'confirmedDeployedVersion': !exists(json, 'confirmedDeployedVersion') ? undefined : json['confirmedDeployedVersion'],
    };
}

export function MessageMappingModelToJSON(value?: MessageMappingModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'metadata': ReadModelMetadataToJSON(value.metadata),
        'name': value.name,
        'connection': ConnectionIdToJSON(value.connection),
        'description': value.description,
        'fromTable': MappableTableToJSON(value.fromTable),
        'fieldMappings': value.fieldMappings === undefined ? undefined : (value.fieldMappings === null ? null : (value.fieldMappings as Array<any>).map(MappedFieldToJSON)),
        'deployedAt': value.deployedAt === undefined ? undefined : (value.deployedAt.toISOString()),
        'deployedVersion': value.deployedVersion,
        'confirmedDeployedVersion': value.confirmedDeployedVersion,
    };
}

