/* tslint:disable */
/* eslint-disable */
/**
 * Dolittle.Bridge.M3
 * Bridge API - made for Dolittle Studio
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Contact: dolittle@dolittle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConnectionConfiguration } from './ConnectionConfiguration';
import {
    ConnectionConfigurationFromJSON,
    ConnectionConfigurationFromJSONTyped,
    ConnectionConfigurationToJSON,
} from './ConnectionConfiguration';
import type { ConnectionStatus } from './ConnectionStatus';
import {
    ConnectionStatusFromJSON,
    ConnectionStatusFromJSONTyped,
    ConnectionStatusToJSON,
} from './ConnectionStatus';
import type { EnvironmentType } from './EnvironmentType';
import {
    EnvironmentTypeFromJSON,
    EnvironmentTypeFromJSONTyped,
    EnvironmentTypeToJSON,
} from './EnvironmentType';
import type { ReadModelMetadata } from './ReadModelMetadata';
import {
    ReadModelMetadataFromJSON,
    ReadModelMetadataFromJSONTyped,
    ReadModelMetadataToJSON,
} from './ReadModelMetadata';
import type { RemoteServiceStatus } from './RemoteServiceStatus';
import {
    RemoteServiceStatusFromJSON,
    RemoteServiceStatusFromJSONTyped,
    RemoteServiceStatusToJSON,
} from './RemoteServiceStatus';

/**
 * 
 * @export
 * @interface ConnectionModel
 */
export interface ConnectionModel {
    /**
     * 
     * @type {string}
     * @memberof ConnectionModel
     */
    id?: string;
    /**
     * 
     * @type {ReadModelMetadata}
     * @memberof ConnectionModel
     */
    metadata?: ReadModelMetadata;
    /**
     * 
     * @type {string}
     * @memberof ConnectionModel
     */
    readonly connectionId?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionModel
     */
    description?: string;
    /**
     * 
     * @type {EnvironmentType}
     * @memberof ConnectionModel
     */
    chosenEnvironment?: EnvironmentType;
    /**
     * 
     * @type {ConnectionConfiguration}
     * @memberof ConnectionModel
     */
    _configuration?: ConnectionConfiguration;
    /**
     * 
     * @type {ConnectionStatus}
     * @memberof ConnectionModel
     */
    status?: ConnectionStatus;
    /**
     * 
     * @type {RemoteServiceStatus}
     * @memberof ConnectionModel
     */
    mdpStatus?: RemoteServiceStatus;
    /**
     * 
     * @type {RemoteServiceStatus}
     * @memberof ConnectionModel
     */
    ionStatus?: RemoteServiceStatus;
}

/**
 * Check if a given object implements the ConnectionModel interface.
 */
export function instanceOfConnectionModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConnectionModelFromJSON(json: any): ConnectionModel {
    return ConnectionModelFromJSONTyped(json, false);
}

export function ConnectionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'metadata': !exists(json, 'metadata') ? undefined : ReadModelMetadataFromJSON(json['metadata']),
        'connectionId': !exists(json, 'connectionId') ? undefined : json['connectionId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'chosenEnvironment': !exists(json, 'chosenEnvironment') ? undefined : EnvironmentTypeFromJSON(json['chosenEnvironment']),
        '_configuration': !exists(json, 'configuration') ? undefined : ConnectionConfigurationFromJSON(json['configuration']),
        'status': !exists(json, 'status') ? undefined : ConnectionStatusFromJSON(json['status']),
        'mdpStatus': !exists(json, 'mdpStatus') ? undefined : RemoteServiceStatusFromJSON(json['mdpStatus']),
        'ionStatus': !exists(json, 'ionStatus') ? undefined : RemoteServiceStatusFromJSON(json['ionStatus']),
    };
}

export function ConnectionModelToJSON(value?: ConnectionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'metadata': ReadModelMetadataToJSON(value.metadata),
        'name': value.name,
        'description': value.description,
        'chosenEnvironment': EnvironmentTypeToJSON(value.chosenEnvironment),
        'configuration': ConnectionConfigurationToJSON(value._configuration),
        'status': ConnectionStatusToJSON(value.status),
        'mdpStatus': RemoteServiceStatusToJSON(value.mdpStatus),
        'ionStatus': RemoteServiceStatusToJSON(value.ionStatus),
    };
}

