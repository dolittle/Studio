/* tslint:disable */
/* eslint-disable */
/**
 * Aigonix.Bridge.M3
 * Bridge API - made for Aigonix Studio
 *
 * The version of the OpenAPI document: 0.0.1.351
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MappableTableColumn } from './MappableTableColumn';
import {
    MappableTableColumnFromJSON,
    MappableTableColumnFromJSONTyped,
    MappableTableColumnToJSON,
} from './MappableTableColumn';

/**
 * Represents a table in M3 that can be mapped into message-types
 * @export
 * @interface MappableTable
 */
export interface MappableTable {
    /**
     * The name of the table in M3
     * @type {string}
     * @memberof MappableTable
     */
    name: string;
    /**
     * Description of the table, from the M3 metadata
     * @type {string}
     * @memberof MappableTable
     */
    description: string;
    /**
     * The columns in the table.
     * @type {Array<MappableTableColumn>}
     * @memberof MappableTable
     */
    columns: Array<MappableTableColumn>;
    /**
     * The columns that are required in any mapping from the table (i.e. the
     * primary key of the table)
     * @type {Array<MappableTableColumn>}
     * @memberof MappableTable
     */
    required: Array<MappableTableColumn>;
}

/**
 * Check if a given object implements the MappableTable interface.
 */
export function instanceOfMappableTable(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "columns" in value;
    isInstance = isInstance && "required" in value;

    return isInstance;
}

export function MappableTableFromJSON(json: any): MappableTable {
    return MappableTableFromJSONTyped(json, false);
}

export function MappableTableFromJSONTyped(json: any, ignoreDiscriminator: boolean): MappableTable {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'columns': ((json['columns'] as Array<any>).map(MappableTableColumnFromJSON)),
        'required': ((json['required'] as Array<any>).map(MappableTableColumnFromJSON)),
    };
}

export function MappableTableToJSON(value?: MappableTable | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'columns': ((value.columns as Array<any>).map(MappableTableColumnToJSON)),
        'required': ((value.required as Array<any>).map(MappableTableColumnToJSON)),
    };
}

