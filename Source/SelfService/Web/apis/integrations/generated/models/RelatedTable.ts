/* tslint:disable */
/* eslint-disable */
/**
 * Aigonix.Bridge.M3
 * Bridge API - made for Dolittle Studio
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Contact: dolittle@dolittle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RelatedTable
 */
export interface RelatedTable {
    /**
     * 
     * @type {string}
     * @memberof RelatedTable
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedTable
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedTable
     */
    category: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedTable
     */
    component: string;
    /**
     * 
     * @type {number}
     * @memberof RelatedTable
     */
    importance: number;
}

/**
 * Check if a given object implements the RelatedTable interface.
 */
export function instanceOfRelatedTable(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "category" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "importance" in value;

    return isInstance;
}

export function RelatedTableFromJSON(json: any): RelatedTable {
    return RelatedTableFromJSONTyped(json, false);
}

export function RelatedTableFromJSONTyped(json: any, ignoreDiscriminator: boolean): RelatedTable {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'category': json['category'],
        'component': json['component'],
        'importance': json['importance'],
    };
}

export function RelatedTableToJSON(value?: RelatedTable | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'category': value.category,
        'component': value.component,
        'importance': value.importance,
    };
}

