/* tslint:disable */
/* eslint-disable */
/**
 * Aigonix.Bridge.M3
 * Bridge API - made for Aigonix Studio
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FieldType } from './FieldType';
import {
    FieldTypeFromJSON,
    FieldTypeFromJSONTyped,
    FieldTypeToJSON,
} from './FieldType';

/**
 * 
 * @export
 * @interface Parameter
 */
export interface Parameter {
    /**
     * 
     * @type {string}
     * @memberof Parameter
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Parameter
     */
    description?: string;
    /**
     * 
     * @type {FieldType}
     * @memberof Parameter
     */
    type?: FieldType;
    /**
     * 
     * @type {number}
     * @memberof Parameter
     */
    length?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Parameter
     */
    required?: boolean;
}

/**
 * Check if a given object implements the Parameter interface.
 */
export function instanceOfParameter(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ParameterFromJSON(json: any): Parameter {
    return ParameterFromJSONTyped(json, false);
}

export function ParameterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Parameter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': !exists(json, 'type') ? undefined : FieldTypeFromJSON(json['type']),
        'length': !exists(json, 'length') ? undefined : json['length'],
        'required': !exists(json, 'required') ? undefined : json['required'],
    };
}

export function ParameterToJSON(value?: Parameter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'type': FieldTypeToJSON(value.type),
        'length': value.length,
        'required': value.required,
    };
}

