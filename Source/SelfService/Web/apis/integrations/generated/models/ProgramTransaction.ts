/* tslint:disable */
/* eslint-disable */
/**
 * Aigonix.Bridge.M3
 * Bridge API - made for Aigonix Studio
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Parameter } from './Parameter';
import {
    ParameterFromJSON,
    ParameterFromJSONTyped,
    ParameterToJSON,
} from './Parameter';

/**
 * 
 * @export
 * @interface ProgramTransaction
 */
export interface ProgramTransaction {
    /**
     * 
     * @type {string}
     * @memberof ProgramTransaction
     */
    programName?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramTransaction
     */
    programDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramTransaction
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramTransaction
     */
    description?: string;
    /**
     * 
     * @type {Array<Parameter>}
     * @memberof ProgramTransaction
     */
    parameters?: Array<Parameter>;
}

/**
 * Check if a given object implements the ProgramTransaction interface.
 */
export function instanceOfProgramTransaction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProgramTransactionFromJSON(json: any): ProgramTransaction {
    return ProgramTransactionFromJSONTyped(json, false);
}

export function ProgramTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProgramTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'programName': !exists(json, 'programName') ? undefined : json['programName'],
        'programDescription': !exists(json, 'programDescription') ? undefined : json['programDescription'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'parameters': !exists(json, 'parameters') ? undefined : ((json['parameters'] as Array<any>).map(ParameterFromJSON)),
    };
}

export function ProgramTransactionToJSON(value?: ProgramTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'programName': value.programName,
        'programDescription': value.programDescription,
        'name': value.name,
        'description': value.description,
        'parameters': value.parameters === undefined ? undefined : ((value.parameters as Array<any>).map(ParameterToJSON)),
    };
}

