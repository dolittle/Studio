/* tslint:disable */
/* eslint-disable */
/**
 * Dolittle.Bridge.M3
 * Bridge API - made for Dolittle Studio
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Contact: dolittle@dolittle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FieldType } from './FieldType';
import {
    FieldTypeFromJSON,
    FieldTypeFromJSONTyped,
    FieldTypeToJSON,
} from './FieldType';

/**
 * 
 * @export
 * @interface MappableTableColumn
 */
export interface MappableTableColumn {
    /**
     * 
     * @type {string}
     * @memberof MappableTableColumn
     */
    m3ColumnName?: string;
    /**
     * 
     * @type {string}
     * @memberof MappableTableColumn
     */
    m3Description?: string;
    /**
     * 
     * @type {FieldType}
     * @memberof MappableTableColumn
     */
    type?: FieldType;
    /**
     * 
     * @type {number}
     * @memberof MappableTableColumn
     */
    fieldLength?: number;
}

/**
 * Check if a given object implements the MappableTableColumn interface.
 */
export function instanceOfMappableTableColumn(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MappableTableColumnFromJSON(json: any): MappableTableColumn {
    return MappableTableColumnFromJSONTyped(json, false);
}

export function MappableTableColumnFromJSONTyped(json: any, ignoreDiscriminator: boolean): MappableTableColumn {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'm3ColumnName': !exists(json, 'm3ColumnName') ? undefined : json['m3ColumnName'],
        'm3Description': !exists(json, 'm3Description') ? undefined : json['m3Description'],
        'type': !exists(json, 'type') ? undefined : FieldTypeFromJSON(json['type']),
        'fieldLength': !exists(json, 'fieldLength') ? undefined : json['fieldLength'],
    };
}

export function MappableTableColumnToJSON(value?: MappableTableColumn | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'm3ColumnName': value.m3ColumnName,
        'm3Description': value.m3Description,
        'type': FieldTypeToJSON(value.type),
        'fieldLength': value.fieldLength,
    };
}

