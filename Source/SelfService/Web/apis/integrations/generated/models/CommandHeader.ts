/* tslint:disable */
/* eslint-disable */
/**
 * Aigonix.Bridge.M3
 * Bridge API - made for Aigonix Studio
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CommandHeader
 */
export interface CommandHeader {
    /**
     * 
     * @type {string}
     * @memberof CommandHeader
     */
    connection?: string;
    /**
     * 
     * @type {string}
     * @memberof CommandHeader
     */
    m3Program?: string;
    /**
     * 
     * @type {string}
     * @memberof CommandHeader
     */
    m3Transaction?: string;
    /**
     * 
     * @type {string}
     * @memberof CommandHeader
     */
    commandId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommandHeader
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CommandHeader
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CommandHeader
     */
    namespace?: string;
    /**
     * 
     * @type {Date}
     * @memberof CommandHeader
     */
    createdAt?: Date;
    /**
     * The last time (if any) the command mapping was deployed. May be null if
     * it has never been deployed
     * @type {Date}
     * @memberof CommandHeader
     */
    deployedAt?: Date | null;
    /**
     * The last deployed version, if any. May be null if it has never been
     * deployed
     * @type {number}
     * @memberof CommandHeader
     */
    deployedVersion?: number | null;
    /**
     * The last deployed version that has been confirmed by the remote service.
     * May be null if it has never been confirmed or if it has been deployed.
     * @type {number}
     * @memberof CommandHeader
     */
    confirmedDeployedVersion?: number | null;
}

/**
 * Check if a given object implements the CommandHeader interface.
 */
export function instanceOfCommandHeader(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommandHeaderFromJSON(json: any): CommandHeader {
    return CommandHeaderFromJSONTyped(json, false);
}

export function CommandHeaderFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommandHeader {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connection': !exists(json, 'connection') ? undefined : json['connection'],
        'm3Program': !exists(json, 'm3Program') ? undefined : json['m3Program'],
        'm3Transaction': !exists(json, 'm3Transaction') ? undefined : json['m3Transaction'],
        'commandId': !exists(json, 'commandId') ? undefined : json['commandId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'deployedAt': !exists(json, 'deployedAt') ? undefined : (json['deployedAt'] === null ? null : new Date(json['deployedAt'])),
        'deployedVersion': !exists(json, 'deployedVersion') ? undefined : json['deployedVersion'],
        'confirmedDeployedVersion': !exists(json, 'confirmedDeployedVersion') ? undefined : json['confirmedDeployedVersion'],
    };
}

export function CommandHeaderToJSON(value?: CommandHeader | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'connection': value.connection,
        'm3Program': value.m3Program,
        'm3Transaction': value.m3Transaction,
        'commandId': value.commandId,
        'name': value.name,
        'description': value.description,
        'namespace': value.namespace,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'deployedAt': value.deployedAt === undefined ? undefined : (value.deployedAt === null ? null : value.deployedAt.toISOString()),
        'deployedVersion': value.deployedVersion,
        'confirmedDeployedVersion': value.confirmedDeployedVersion,
    };
}

